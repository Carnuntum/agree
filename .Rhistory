intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nn$nums[-(1:j)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nums[-(1:j)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nn$nums[j:length(nn$nums)]
print(nums)
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
ord
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nn$nums[j:length(nn$nums)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
help_tauInt_sort <- function(data) {
out <- data.frame()
k <- data
for(i in 1:nrow(k)) {
m <- min(k)
w <- which(k == m, arr.ind = T)
out <- rbind(out, k[w[,1], ])
k <- k[-w[,1], ]
}
return(out)
}
intraclassTau(ord)
ord
intraclassTau(kendTauC)
ord
intraclassTau(ord)
kendTauC <- data.frame('rater1' = c(15,2,16,7,4,13,6,8),
'rater2' = c(12,1,10,11,3,14,5,9))
ord <- data.frame('rater1' = c(1,5,7,11,2,15,10,3),
'rater2' = c(6,9,8,13,4,16,14,12))
help_tauInt_sort <- function(data) {
out <- data.frame()
k <- data
for(i in 1:nrow(k)) {
m <- min(k)
w <- which(k == m, arr.ind = T)
out <- rbind(out, k[w[,1], ])
k <- k[-w[,1], ]
}
return(out)
}
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nn$nums[j:length(nn$nums)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
ord
intraclassTau(ord)
p_table <- read.csv2('example_data/tauIntra_p_table.csv')
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nn$nums[j:length(nn$nums)]
print(nums)
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
j <- 3
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
j = j + 2
nums <- nums[-(1:2)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
rm(intraclassTau)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
nums <- nums[-(1:2)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nums[idx], `<`, nums))
below <- below + sum(sapply(nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nums[idx], `<`, nums))
below <- below + sum(sapply(nums[idx], `>`, nums))
nums <- nums[-(1:2)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
intraclassTau <- function(data) {
nn <- help_tauInt_sort(data)
nn <- pivot_longer(nn,
cols = 1:2,
names_to = 'new',
values_to = 'nums')
idx <- 1
nums <- nn$nums[3:length(nn$nums)]
above <- 0
below <- 0
for(i in 1:((length(nums)/2))) {
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
idx <- idx + 1
above <- above + sum(sapply(nn$nums[idx], `<`, nums))
below <- below + sum(sapply(nn$nums[idx], `>`, nums))
nums <- nums[-(1:2)]
idx <- idx + 1
}
S <- above-below
N <- nrow(data) * ncol(data)
Sp <- S - ((N * (N - 2)) / 4)
sig <- sqrt((N * (N - 2) * (N + 2)) / 18)
u <- (abs(Sp) - 1) / sig
tauIn <- Sp / (N * (N - 2) / 4)
p <- if(is.na(p_table[which(p_table$Sp == Sp), paste0("X", N)])) {
NULL
} else {
as.numeric(p_table[which(p_table$Sp == Sp), paste0("X", N)])
}
return (list('S' = S, 'N' = N,
'Sp' = Sp, 'sigma' = sig,
'u' = u, 'tauIn' = tauIn,
'p.value' = p))
}
intraclassTau(ord)
View(p_table)
shiny::runApp()
runApp()
runApp()
ord
write.csv2(ord, 'tauIntraXmp.csv')
runApp()
write.csv(ord, 'tauIntraXmp.csv')
runApp()
read.csv('example_data/tauIntraXmp.csv')
ord
write_csv(ord, 'example_data/tauIntraXmp.csv')
read.csv('example_data/tauIntraXmp.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.null(deg)
exists(deg)
exists(deg)
exists(0)
exists(o)
exists(deg, mode = 'numeric')
is.null(deg)
runApp()
runApp()
runApp()
req(deg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
