# X2.corr <- as(X2.corr, Class = 'list')
# X2.corr <- matrix(X2.corr[c(1,2,3)]) %>%
#   as.numeric()
# x2Mat <- round(rbind(X2, X2.corr),4)
# colnames(x2Mat) <- c('X2','df','p-value')
return(list('paPos' = PApos, 'paNeg' = PAneg, 'paPosSF' = PAposSF,
'paNegSF' = PAnegSF,'posExpect' = PAposExpect,
'negExpect' = PAnegExpect, 'kPos' = Kpos, 'kNeg' = Kneg,
'chiUncor' = X2$statistic, 'chipUncor' = X2$p.value,
'chidfUncor' = X2$parameter, 'chiValCor' = X2.corr$statistic,
'chipCor' = X2.corr$p.value, 'chidfCor' = X2.corr$parameter))
}
PercentAgreeFor2by2(m)
runApp()
PercentAgreeFor2by2 <- function(userData) {
userData <- as.data.frame(userData)
if(nrow(userData) > 2) {
userData <- as.matrix(table(userData[,1], userData[,2]))
} else {
userData <- as.matrix(userData) %>% addmargins()
}
if(nrow(userData) == 2 && ncol(userData) == 2) {
userData <- as.matrix(userData) %>% addmargins()}
PApos <- round((userData[1]/sum(userData[c(1,2,4)]))*100, 3)
PAneg <- round((userData[5]/sum(userData[c(2,4,5)]))*100, 3)
PAposSF <- round((2*userData[1]/(2*userData[1] + sum(userData[c(2,4)])))*100, 3)
PAnegSF <- round((2*userData[5]/(2*userData[5] + sum(userData[c(2,4)])))*100, 3)
chanceMat <- round(as.matrix(data.frame(((userData[7]*userData[3])/userData[9]),
((userData[7]*userData[6])/userData[9]),
((userData[8]*userData[3])/userData[9]),
((userData[8]*userData[6])/userData[9]))), 3)
PAposExpect <- round((chanceMat[1]/sum(chanceMat[c(1,2,3)]))*100, 3)
PAnegExpect <- round((chanceMat[4]/sum(chanceMat[c(2,3,4)]))*100, 3)
Kpos <- round((((PApos/100) - (PAposExpect/100)) / (1-(PAposExpect/100))), 3)
Kneg <- round((((PAneg/100) - (PAnegExpect/100)) / (1-(PAnegExpect/100))), 3)
# m1 <- matrix(c(paste('+',PApos), paste('-',PAneg), PAposExpect, PAnegExpect), ncol = 2)
# colnames(m1) <- c('proportion','expected')
# rownames(m1) <- c('positive', 'negative')
# m2 <- matrix(c(paste('+',PAposSF), paste('-',PAnegSF)))
# colnames(m2) <- 'conditional proportion'
# m3 <- matrix(c(paste('+',Kpos), paste('-',Kneg)))
# colnames(m3) <- 'category specific K'
X2 <- chisq.test(userData[-3,-3], correct = F)
# X2 <- as(X2, Class = 'list')
# X2 <- matrix(X2[c(1,2,3)]) %>%
#   as.numeric()
X2.corr <- chisq.test(userData[-3,-3], correct = T)
# X2.corr <- as(X2.corr, Class = 'list')
# X2.corr <- matrix(X2.corr[c(1,2,3)]) %>%
#   as.numeric()
# x2Mat <- round(rbind(X2, X2.corr),4)
# colnames(x2Mat) <- c('X2','df','p-value')
return(list('paPos' = PApos, 'paNeg' = PAneg, 'paPosSF' = PAposSF,
'paNegSF' = PAnegSF,'posExpect' = PAposExpect,
'negExpect' = PAnegExpect, 'kPos' = Kpos, 'kNeg' = Kneg,
'chiUncor' = X2$statistic, 'chipUncor' = X2$p.value,
'chidfUncor' = X2$parameter, 'chiValCor' = X2.corr$statistic,
'chipCor' = X2.corr$p.value, 'chidfCor' = X2.corr$parameter))
}
PercentAgreeFor2by2(read_csv('pa_dicho_example.csv'))
runApp()
runApp()
runApp()
runApp()
runApp()
userData <- as.matrix(table(m[,1], m[,2]))
userData
matrix(data = c(sample(0:1, 100, T), sample(0:1, 100, T)), ncol = 2,
dimnames = list(c(seq(1,9)),
c('rater1', 'rater2')))
matrix(data = c(sample(0:1, 100, T), sample(0:1, 100, T)), ncol = 2,
dimnames = list(c(seq(1,100)),
c('rater1', 'rater2')))
runApp()
write_csv(percAgrPosNeg, 'pa_dicho_example.csv')
write_csv(as.data.frame(percAgrPosNeg), 'pa_dicho_example.csv')
runApp()
read.csv('pa_dicho_example.csv')
m <- read.csv('pa_dicho_example.csv')
runApp()
m
class(m)
class(read_csv('pa_dicho_example.csv'))
glimpse(m)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(exactTest)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- (1,2,3,4,5,6,7,8)
a <- c(1,2,3,4,5,6,7,8)
b <- c(0,0,0,0,0,0,7,8)
cor.test(a,b)
c <- as.data.frame(a,b)
c
c <- data.frame(a,b)
c
cor.test(c$a, c$b)
a <- c(1,7,6,5,5,2,9)
b <- c(3,9,6,6,7,4,8)
data.frame(c(1,7,6,5,5,2,9), c(3,9,6,6,7,4,8))
data.frame('rater1' = c(1,7,6,5,5,2,9),
'rater2' = c(3,9,6,6,7,4,8))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
column
percentAgree
runApp()
runApp()
runApp()
percentAgree
runApp()
c
spearmanTableExample <- data.frame('rater1' = c(1,7,6,5,5,2,9),
'rater2' = c(3,9,6,6,7,4,8))
t <- cor.test(spearmanTableExample$rater1, spearmanTableExample$rater2)
t
t$statistic
spearmanTableExample
cor.test(spearmanTableExample[,1], spearmanTableExample[,2])
spearmanTableExample
c <- t(spearmanTableExample)
c
cor.test(c[1,], c[2,])
cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
t <- cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
t$statistic
t$parameter
t$p.value
t$estimate
c <- cor.test(spearmanTableExample[,1], spearmanTableExample[,2])
c$parameter
t$statistic
t$null.value
t
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cor.test(spearmanTableExample[,1], spearmanTableExample[,2])
cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
runApp()
runApp()
shiny::runApp()
warnings()
warning()
runApp()
runApp()
runApp()
c <- cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
c
warning(c)
warnings(c)
summary(warnings())
c
warning(cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's'))
c <- cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
c
warning(c)[1]
warning(c)[2]
class(warning(c))
warnings
warnings(c)
c
structure(c)
structure(c)
runApp()
c <- quietly(cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's'))
c
unlist(cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's'))
quietly(unlist(cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- list(3,4,5,5)
a
a[5]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
string <- 'a test sentence to test it'
str_detect(string, pattern = 'sentence')
runApp()
string <- 'Cannot compute exact p-value with ties'
str_detect(string, pattern = 'exact p-value ties')
str_detect(string, pattern = 'exact p-value with')
str_detect(string, pattern = '\exact & \p-value & \ties')
str_detect(string, pattern = '(exact)')
str_detect(string, pattern = '(exact) & (ties)')
str_detect(string, pattern = '\w')
str_detect(string, pattern = 'exact | ties')
str_detect(string, pattern = 'exact | ties | p-value')
str_detect(string, pattern = 'exact & ties & p-value')
runApp()
string
str_extract(string, pattern = '\b exact \b ')
str_extract(string, pattern = '\bexact\b ')
str_extract(string, pattern = '.*exact.*')
str_extract(string, pattern = 'exact p-value with ties')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
kendall(spearmanTableExample)
kendall(spearmanTableExample, correct = T)
k <- kendall(spearmanTableExample, correct = T)
k$method
k$value
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
menuItem
runApp()
runApp()
runApp()
c <- spearmanTableExample
c
c[1]
c[1,1]
c[1,4] <- 3
c[1,4]
c
c$rater1[4]
c$rater1[4] <- 3
c
cor.test(c$rater1, c$rater2, method = 's')
duplicated(c)
duplicated(c$rater1)
duplicated(c$rater2)
is(c, 'duplicated')
is(c$rater1, 'duplicated')
is(c$rater2, 'duplicated')
anyDuplicated(c)
duplicated.data.frame(c)
duplicated.matrix(c)
c
lapply(c, duplicated)
isTRUE(lapply(c, duplicated))
any(lapply(c, duplicated))
any(as.logical(lapply(c, duplicated)))
any(unlist(lapply(c, duplicated)))
c$rater2[3] <- 1
any(unlist(lapply(c, duplicated)))
Sys.time()
a <- Sys.time()
Sys.time() - a
a <- Sys.time()
any(unlist(lapply(c, duplicated)))
Sys.time() - a
a <- Sys.time()
any(unlist(lapply(c, duplicated)))
Sys.time() - a
c
cc <- c
c <- rbind(c, cc)
c
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
c
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
a <- Sys.time()
any(unlist(lapply(c, duplicated)))
Sys.time() - a
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
cc <- c
c <- rbind(c, cc)
c <- rbind(c, cc)
c <- rbind(c, cc)
a <- Sys.time()
any(unlist(lapply(c, duplicated)))
Sys.time() - a
install.packages('VGAM')
library(VGAM)
kendall.tau(spearmanTableExample$rater1, spearmanTableExample$rater2)
cor.test(spearmanTableExample$rater1, spearmanTableExample$rater2, method = 's')
0.88*0.66
c <- data.frame('rater1' <- c(1,2,3,4,5), 'rater2' <- c(2,1,4,5,3))
c
c <- data.frame('rater1' <- c(1,2,3,4,5), 'rater2' <- c(2,1,4,5,3))
c
colnames(c) <- c('r1', 'r2')
c
kendall.tau(c$r1, c$r2)
cor.test(c$r1, c$r2, method = 'kendall')
cc <- ddta.frame('r1' <- c(1,2,2,4,4,6,6,8,9,9), 'r2' <- c(1,2,4,4,4,4,8,8,8,10))
cc <- data.frame('r1' <- c(1,2,2,4,4,6,6,8,9,9), 'r2' <- c(1,2,4,4,4,4,8,8,8,10))
cc
cc
colnames(cc) <- c('1', '2')
cc
cor.test(cc$1, cc$2, method = 'kendall')
cor.test(cc[,1], cc[,2], method = 'k')
any(unlist(lapply(cc, duplicated)))
any(unlist(lapply(c, duplicated)))
runApp()
runApp()
cor.test(cc[,1], cc[,2], method = 'k')
quietly(cor.test(cc[,1], cc[,2], method = 'k'))
supressWarnings(cor.test(cc[,1], cc[,2], method = 'k'))
suppressWarnings(cor.test(cc[,1], cc[,2], method = 'k'))
cc
c
spearmanTableExample
write_csv(spearmanTableExample, 'spearExample.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(cor.test(cc[,1], cc[,2], method = 'k'))
k <- (cor.test(cc[,1], cc[,2], method = 'k'))
k$statistic
k$parameter
k$estimate
k$p.value
runApp()
runApp()
runApp()
runApp()
c
kendall(c)
k <- kendall(c)
k$statistic
k$value
kendall.tau(c)
kendall.tau(c$r1, c$r2)
kend <- 'kend'
if(kend == 'kend') {T}
runApp()
k
k$estimate
k$df
runApp()
runApp()
runApp()
runApp()
runApp()
k$statistic
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- NULL
as.numeric(a)
if(a == numeric(0)) {T}
is.null(a)
a
is.null(as.numeric(a))
numeric(0)
a <- numeric(0)
class(a)
if(a == 0)
{T}
if(length(a) == 0) {T}
round(NULL)
runApp()
runApp()
k <- (cor.test(cc[,1], cc[,2], method = 'k'))
k
cor.test(spearmanTableExample[,1], spearmanTableExample[,2])
cor.test(spearmanTableExample[,1], spearmanTableExample[,2], method = 's')
k
kendall.tau(c$r1, c$r2)
c
cc
c
kendall(c <- spearmanTableExample)
cor.test(spearmanTableExample[,1], c$rater2)
cor.test(spearmanTableExample[,1], c$rater2, method = 's')
