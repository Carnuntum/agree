runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DescTools)
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'z')
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'z-transform')
t <- DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'z-transform')
t$s.shift
t <- DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'asymptotic')
t$s.shift
t$rho.c
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'asymptotic')$rho.c
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'z-transform')$rho.c
runApp()
xmp_ccc
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'z-transform')$rho.c
DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2], ci = 'asymptotic')$rho.c
xmp_ccc[,1]
runApp()
x <- read.csv('example_data/cccXmp.csv')
x
x[,1]
DescTools::CCC(x[,1], x[,2], ci = 'z-transform')$rho.c
DescTools::CCC(x[,1], x[,2], ci = 'asymptotic')$rho.c
runApp()
runApp()
shiny::runApp()
install.packages('BlandAltmanLeh')
library(BlandAltmanLeh)
t
x
x
x <- DescTools::CCC(xmp_ccc[,1], xmp_ccc[,2])
x
bland.altman.plot(group1 = x$blalt[,1], group2 = x$blalt[,2])
x$blalt[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
library(BlantAltmanLeh)
x <- c(494,395,516,434,476,557,413,442,650,433,417,656,267,
478,178,423,427)
y <- c(512,430,520,428,500,600,364,380,658,445,432,626,260,
477,259,350,451)
tmp.ccc <- CCC(x, y, ci = "z-transform", conf.level = 0.95)
tmp.mean <- mean(tmp.ccc$blalt$delta)
tmp.sd <- sqrt(var(tmp.ccc$blalt$delta))
plot(tmp.ccc$blalt$mean, tmp.ccc$blalt$delta, pch = 16,
xlab = "Average PEFR by two meters (L/min)",
ylab = "Difference in PEFR (L/min)", xlim = c(0,800),
ylim = c(-140,140))
abline(h = tmp.mean, lty = 1, col = "gray")
abline(h = tmp.mean - (2 * tmp.sd), lty = 2, col = "gray")
abline(h = tmp.mean + (2 * tmp.sd), lty = 2, col = "gray")
legend(x = "topleft", legend = c("Mean difference",
"Mean difference +/ 2SD"), lty = c(1,2), bty = "n")
legend(x = 0, y = 125, legend = c("Difference"), pch = 16,
bty = "n")
x <- c(494,395,516,434,476,557,413,442,650,433,417,656,267,
478,178,423,427)
y <- c(512,430,520,428,500,600,364,380,658,445,432,626,260,
477,259,350,451)
tmp.ccc <- CCC(x, y, ci = "z-transform", conf.level = 0.95)
tmp.mean <- mean(tmp.ccc$blalt$delta)
tmp.sd <- sqrt(var(tmp.ccc$blalt$delta))
x <- c(494,395,516,434,476,557,413,442,650,433,417,656,267,
478,178,423,427)
y <- c(512,430,520,428,500,600,364,380,658,445,432,626,260,
477,259,350,451)
tmp.ccc <- DescTools::CCC(x, y, ci = "z-transform", conf.level = 0.95)
tmp.mean <- mean(tmp.ccc$blalt$delta)
tmp.sd <- sqrt(var(tmp.ccc$blalt$delta))
plot(tmp.ccc$blalt$mean, tmp.ccc$blalt$delta, pch = 16,
xlab = "Average PEFR by two meters (L/min)",
ylab = "Difference in PEFR (L/min)", xlim = c(0,800),
ylim = c(-140,140))
abline(h = tmp.mean, lty = 1, col = "gray")
abline(h = tmp.mean - (2 * tmp.sd), lty = 2, col = "gray")
abline(h = tmp.mean + (2 * tmp.sd), lty = 2, col = "gray")
legend(x = "topleft", legend = c("Mean difference",
"Mean difference +/ 2SD"), lty = c(1,2), bty = "n")
legend(x = 0, y = 125, legend = c("Difference"), pch = 16,
bty = "n")
c <- DescTools::CCC(x, y)
c
bland.altman.plot(c$blalt[,1], c$blalt[,2])
bland.altman.plot(c$blalt[,1], c$blalt[,2])
bland.altman.plot(c$blalt$mean, c$blalt$delta)
install.packages('MathComp')
install.packages('mathcomp')
install.packages('MethComp')
library(MethComp)
BA.plot(c$blalt$mean, c$blalt$delta)
BA.plot(as.data.frame(c$blalt$mean), as.data.frame(c$blalt$delta))
class(c$blalt$mean)
BA.plot(c$blalt$mean, c$blalt$delta)
BA.plot(x,y)
class(x)
typeof(x)
mode(x)
is.vector(x)
data("ox")
ox
d <- data.frame(x,y)
d
BA.plot(d)
BA.plot(d$x, d$y)
ox
ox$meth
ox$item
class(ox)
BA.plot(ox)
x
,y
typeof(os)
typeof(ox)
mode(ox)
ox
BA.plot(y1 = x, y2 = y)
bland.altman.plot(ox)
bland.altman.plot(x, y)
bland.altman.plot(x, y, graph.sys = 'ggplot2')
bland.altman.plot(x, y, graph.sys = 'base', sunflower = T)
bland.altman.plot(x, y, graph.sys = 'base', sunflower = T)
bland.altman.plot(x, y, graph.sys = 'base', sunflower = T, conf.int = 0,95)
bland.altman.plot(x, y, graph.sys = 'base', sunflower = T, conf.int = 0.95)
bland.altman.plot(x, y, graph.sys = 'ggplot2', sunflower = T, conf.int = 0.95)
bland.altman.plot(x, y, graph.sys = 'ggplot2')
BA.plot(x, y)
x
x <- data.frame(meth = rep('meth1', 1:length(x)), val = x)
rep(1, 1:5)
rep(1, 1, 5)
x <- data.frame(meth = rep('meth1', 1, length(x), val = x)
)
x
x <- data.frame(meth = rep('meth1', 1, length(x)), val = x)
x
x#
x
x <- c(494,395,516,434,476,557,413,442,650,433,417,656,267,
478,178,423,427)
y <- c(512,430,520,428,500,600,364,380,658,445,432,626,260,
477,259,350,451)
x <- data.frame(meth = rep('meth1', 1, length(x)), val = x)
x
y <- data.frame(meth = rep('meth2', 1, length(y)), val = y)
y
BA.plot(x, y)
d <- data.frame(x,y)
d
BA.plot(d)
BA.plot(d[,2], d[,4])
has.repl(d)
has.repl(d[,2])
class(d$meth)
class(d$val)
x
class(x)
has.repl(x)
has.repl(x[,1])
has.repl(as.data.frame(x[,2]))
x <- c(494,395,516,434,476,557,413,442,650,433,417,656,267,
478,178,423,427)
y <- c(512,430,520,428,500,600,364,380,658,445,432,626,260,
477,259,350,451)
BA.plot(as.data.frame(x), as.data.frame(y))
BA.plot(x,y)
ox
head(ox)
x
y
rbind(x,y)
cbind(x,y)
xx <- data.frame(m1 = rep('CO', 1, length(x)), v = x)
yy <- data.frame(m2 = rep('pulse', 1, length(x)), v = y)
xx
yy
rbind(xx, yy)
xx
list(xx)
rbind(list(xx), list(yy))
xx
cbind(xx, yy)
class(xx$m1)
BA.plot(cbind(xx, yy))
BA.est(x,y)
BA.est(cbind(xx, yy))
BA.plot(x, y)
a <- data.frame(x=seq(1, 30)+rnorm(mean=0, sd=1, n=30),
y=seq(1, 30)*rnorm(mean=1, sd=0.4, n=30))
a
BA.plot(a)
r <- Meth(a, y = 1:2)
BA.plot(a)
class(r)
BA.plot(r)
BA.plot(x, y)
class(x)
class(x,y)
class(c(x,y))
class(y)
is.vector(c(x,y))
is.vector(y)
BA.plot(y1 = x, y2 = y)
x
y
xx
yy
rbind(xx, yy)
with(df, BA.plot(x, y))
merge(xx, yy, by = 'meth')
merge(xx, yy)
xx
yy
library(tidyverse)
inner_join(xx, yy)
left_join(xx, yy)
full_join(xx, yy)
outer(xx, yy)
merge(xx, yy, all = T)
xx
cbind(xx, yy)
d <- cbind(xx, yy)
cbind(d[c(1,4)], stack(d[c(1,3)]))
stack(xx, yy)
xx
class(xx)
stack(xx)
d
pivot_longer(names_to = 'meth', values_to = 'val')
pivot_longer(d, names_to = 'meth', values_to = 'val')
pivot_longer(d, cols = select(m1, m2), names_to = 'meth', values_to = 'val')
pivot_longer(d, cols = c(m1, m2), names_to = 'meth', values_to = 'val')
p <- pivot_longer(d, cols = c(m1, m2), names_to = 'meth', values_to = 'val')
BA.plot(p)
p
print(p)
p <- as.data.frame(p)
p
p <- select(p, meth, val, v)
p
names(p) <- c('meth', 'item', 'y')
p
BA.plot(p)
p
sort(p)
arrange(p)
arrange(desc(p))
p %>% arrange(p)
p <- p %>% arrange(p)
p
BA.plot(p)
ox
head(ox)
head(p)
ox
p
head(oxy)
head(ox)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
TDI(x,y)
warnings()
x
TDI(x,y)
data(plvol)
plvol
d
p
a <- p$item
a
b <- seq(1, length(p$item), 1)
b
d <- data.frame(meth = a, item = b, y = p$y)
d
BA.plot(p)
plvol
p
b
b <- rep(seq(1, length(p$item)/2, 1), 2)
b
p
d
d$item <- b
d
BA.plot(d)
BA.plot(d, axlim = c(50, -50))
BA.plot(d)
BA.plot(d, axlim = c(c(200, 500), c(50, -50))
)
range(x, y)
BA.plot(d, eqax = F)
x
y
bland.altman.plot(x,y)
BA.plot(x, y)
has.repl(as.data.frame(x))
has.repl(as.data.frame(x[,1]))
dim(x[,1])
dim(x)
dim(as.data.frame(x)[,1])
has.repl(as.data.frame(x)[,1])
a <- as.data.frame()
a <- as.data.frame(x)
has.repl(x)
has.repl(a)
has.repl(a[,])
TDI(x, y)
p
TDI(p)
TDI(x, y)
plvol
a <- plvol$y[1:length(plvol)/2]
a
plvol$y
plvol$y[1:100]
a <- plvol$y[1:100]
length(plvol$y)/2
a <- plvol$y[1:length(plvol$y)/2]
a
length(plvol$y)/2
1:length(plvol$y)/2
1:(length(plvol$y)/2)
a <- plvol$y[1:(length(plvol$y)/2)]
a
b <- plvol$y[(length(plvol$y)/2):length(plvol$y)]
b
a
b
TDI(a,b)
length(plvol$y)
198/2
length(a)
length(b)
b <- plvol$y[(length(plvol$y)/2 -1):length(plvol$y)]
b
length(b)
length(a)
a <- plvol$y[1:99]
b <- plvol$y[100:198]
b
length(b)
length(a)
TDI(a,b)
to.wide(plvol)
d
p
x
y
xx
yy
dd <- cbind(xx, yy)
dd
with(dd, TDI(m1, m2))
pw
pw <- to.wide(plvol)
pw
xx
dd
head(dd)
names(dd) <- c('m1', 'v1', 'm2', 'v2')
head(dd)
with(dd, TDI(v1, v2))
pw
head(pw)
with(pw, TDI(Hurley, Nadler))
pw <- to.wide(plvol)
with(pw, TDI(Hurley, Nadler))
with(dd, TDI(v1, v2))
x
y
TDI(dd$v1, dd$v2)
TDI(dd$v1, dd$v2, boot = 1000)
TDI(dd$v1, dd$v2, boot = 10000)
dd
TDI(x, y)
warnings()
data(plvol)
pw <- to.wide(plvol)
with(pw,TDI(Hurley,Nadler))
library(Agreement)
agreement(pw$Hurley, pw$Nadler, TDI_a = 150)
agreement(pw$Hurley, pw$Nadler, TDI_a = 150, error = 'const')
agreement(pw$Hurley, pw$Nadler, TDI_a = 150, error = 'const', target = 'fixed')
agreement(pw$Hurley, pw$Nadler, TDI_a = 150, error = 'const', target = 'fixed')
agreement(pw$Hurley, pw$Nadler, TDI_a = 150, error = 'const', target = 'random')
agreement(y=pw$Hurley,x=pw$Nadler,V_label="h",H_label="n",min=0,max=150,by=10,CCC_a=0.9775,CP_a=0.9,TDI_a=150,error="const",target="random",dec=3,alpha=0.05)
agreement()
agreement
data(plvol)
pw <- to.wide(plvol)
with(pw,TDI(Hurley,Nadler))
install.packages('Agreement')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
l_pn
runApp()
d
dplyr::glimpse(d)
d[1]
d[2]
d[3]
names(d)
attributes(d)
d <- a
a
d
runApp()
d
a <- d
dimnames(a)[2] <- NULL
dimnames(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
